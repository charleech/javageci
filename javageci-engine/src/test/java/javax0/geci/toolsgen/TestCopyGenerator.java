package javax0.geci.toolsgen;

import javax0.geci.api.Source;
import javax0.geci.engine.Geci;
import javax0.geci.tools.AbstractJavaGenerator;
import javax0.geci.tools.CompoundParams;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import static javax0.geci.api.Source.maven;

/**
 * A simple sample code generator that copies the {@link javax0.geci.tools.AbstractDeclaredFieldsGenerator} and
 * {@link javax0.geci.tools.AbstractFilteredFieldsGenerator} to the same name but replacing all fields to be methods.
 */
public class TestCopyGenerator extends AbstractJavaGenerator {

    @Override
    public void process(Source source, Class<?> klass, CompoundParams global) throws Exception {
        final var dstFile = global.get("copyTo");
        final var dst = source.newSource(dstFile).open();
        dst.write("// DO NOT EDIT THIS FILE. THIS WAS GENERATED.");
        dst.write(
            String.join("\n", source.getLines())
                .replaceAll("Field", "Method")
                .replaceAll("field", "method")
                // we have to remove the annotation otherwise the next run would copy the content of the files to
                // themselves and they would grow infinitely and also they would not compile.
                .replaceAll("@Geci\\(\"copyClass.*?\"\\)", ""));
    }

    @Override
    public String mnemonic() {
        return "copyClass";
    }

    @Test
    void generateCopies() throws Exception {
        Assertions.assertFalse(
            new Geci().source(maven("..").module("javageci-tools").mainSource()).register(new TestCopyGenerator()).generate()
            , Geci.FAILED
        );
    }
}
